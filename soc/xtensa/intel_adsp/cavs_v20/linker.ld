/*
 * Linker Script for Icelake.
 *
 * This script is run through the GNU C preprocessor to align the memory
 * offsets with headers.
 *
 * Use spaces for formatting as cpp ignore tab sizes.
 */

#include <config.h>
#include <sof/lib/memory.h>
#include <xtensa/config/core-isa.h>

OUTPUT_ARCH(xtensa)

MEMORY
{
  vector_memory_lit :
        org = XCHAL_MEMERROR_VECTOR_PADDR + SOF_MEM_ERROR_LIT_SIZE,
        len = SOF_MEM_ERROR_LIT_SIZE
  vector_memory_text :
        org = XCHAL_MEMERROR_VECTOR_PADDR,
        len = SOF_MEM_ERROR_TEXT_SIZE
  vector_base_text :
        org = SOF_MEM_VECBASE,
        len = SOF_MEM_VECBASE_LIT_SIZE
  vector_int2_lit :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL2_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_int2_text :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL2_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_int3_lit :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL3_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_int3_text :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL3_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_int4_lit :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL4_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_int4_text :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL4_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_int5_lit :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL5_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_int5_text :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL5_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_int6_lit :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL6_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_int6_text :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL6_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_int7_lit :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL7_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_int7_text :
        org = SOF_MEM_VECBASE + XCHAL_INTLEVEL7_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_kernel_lit :
        org = SOF_MEM_VECBASE + XCHAL_KERNEL_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_kernel_text :
        org = SOF_MEM_VECBASE + XCHAL_KERNEL_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_user_lit :
        org = SOF_MEM_VECBASE + XCHAL_USER_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_user_text :
        org = SOF_MEM_VECBASE + XCHAL_USER_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  vector_double_lit :
        org = SOF_MEM_VECBASE + XCHAL_DOUBLEEXC_VECOFS - SOF_MEM_VECT_LIT_SIZE,
        len = SOF_MEM_VECT_LIT_SIZE
  vector_double_text :
        org = SOF_MEM_VECBASE + XCHAL_DOUBLEEXC_VECOFS,
        len = SOF_MEM_VECT_TEXT_SIZE
  sof_fw :
        org = SOF_FW_BASE,
        len = SOF_FW_MAX_SIZE
  wnd0 :
        org = HP_SRAM_WIN0_BASE,
        len = HP_SRAM_WIN0_SIZE
  wnd1 :
        org = HP_SRAM_WIN1_BASE,
        len = HP_SRAM_WIN1_SIZE
  wnd2 :
        org = HP_SRAM_WIN2_BASE,
        len = HP_SRAM_WIN2_SIZE
  wnd3 :
        org = HP_SRAM_WIN3_BASE,
        len = HP_SRAM_WIN3_SIZE
  static_log_entries_seg (!ari) :
        org = LOG_ENTRY_ELF_BASE,
        len = LOG_ENTRY_ELF_SIZE
  lpsram_mem :
        org = LP_SRAM_BASE,
        len = LP_SRAM_SIZE
}

PHDRS
{
  vector_memory_lit_phdr PT_LOAD;
  vector_memory_text_phdr PT_LOAD;
  vector_base_text_phdr PT_LOAD;
  vector_int2_lit_phdr PT_LOAD;
  vector_int2_text_phdr PT_LOAD;
  vector_int3_lit_phdr PT_LOAD;
  vector_int3_text_phdr PT_LOAD;
  vector_int4_lit_phdr PT_LOAD;
  vector_int4_text_phdr PT_LOAD;
  vector_int5_lit_phdr PT_LOAD;
  vector_int5_text_phdr PT_LOAD;
  vector_int6_lit_phdr PT_LOAD;
  vector_int6_text_phdr PT_LOAD;
  vector_int7_lit_phdr PT_LOAD;
  vector_int7_text_phdr PT_LOAD;
  vector_kernel_lit_phdr PT_LOAD;
  vector_kernel_text_phdr PT_LOAD;
  vector_user_lit_phdr PT_LOAD;
  vector_user_text_phdr PT_LOAD;
  vector_double_lit_phdr PT_LOAD;
  vector_double_text_phdr PT_LOAD;
  sof_fw_phdr PT_LOAD;
  wnd0_phdr PT_LOAD;
  wnd1_phdr PT_LOAD;
  wnd2_phdr PT_LOAD;
  wnd3_phdr PT_LOAD;
  static_log_entries_phdr PT_NOTE;
  lpsram_mem_phdr PT_LOAD;
}

/*  Default entry point:  */
ENTRY(_MainEntry)
_rom_store_table = 0;

/* ABI0 does not use Window base */
PROVIDE(_memmap_vecbase_reset = HP_SRAM_VECBASE_RESET);

/* Various memory-map dependent cache attribute settings: */
_memmap_cacheattr_wbna_trapnull = 0xFF42FFF2;
PROVIDE(_memmap_cacheattr_reset = _memmap_cacheattr_wbna_trapnull);

SECTIONS
{
  .MemoryExceptionVector.text : ALIGN(4)
  {
    _MemoryExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.MemoryExceptionVector.text))
    _MemoryExceptionVector_text_end = ABSOLUTE(.);
  } >vector_memory_text :vector_memory_text_phdr

  .wnd0 (NOLOAD) : ALIGN(8)
  {
    . = ALIGN (32);
    _wnd0_start = ABSOLUTE(.);
    . = . + HP_SRAM_WIN0_SIZE;
    _wnd0_end = ABSOLUTE(.);
  } >wnd0 :wnd0_phdr

  .wnd1 (NOLOAD) : ALIGN(8)
  {
    . = ALIGN (32);
    _wnd1_start = ABSOLUTE(.);
    . = . + HP_SRAM_WIN1_SIZE;
    _wnd1_end = ABSOLUTE(.);
  } >wnd1 :wnd1_phdr

  .wnd2 (NOLOAD) : ALIGN(8)
  {
    . = ALIGN (32);
    _wnd2_start = ABSOLUTE(.);
    . = . + HP_SRAM_WIN2_SIZE;
    _wnd2_end = ABSOLUTE(.);
  } >wnd2 :wnd2_phdr

  .wnd3 (NOLOAD) : ALIGN(8)
  {
    . = ALIGN (32);
    _wnd3_start = ABSOLUTE(.);
    . = . + HP_SRAM_WIN3_SIZE;
    _wnd3_end = ABSOLUTE(.);
  } >wnd3 :wnd3_phdr

  .WindowVectors.text : ALIGN(4)
  {
    _WindowVectors_text_start = ABSOLUTE(.);
    KEEP (*(.WindowVectors.text))
    _WindowVectors_text_end = ABSOLUTE(.);
  } >vector_base_text :vector_base_text_phdr

  .Level2InterruptVector.literal : ALIGN(4)
  {
    _Level2InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level2InterruptVector.literal)
    _Level2InterruptVector_literal_end = ABSOLUTE(.);
  } >vector_int2_lit :vector_int2_lit_phdr

  .Level2InterruptVector.text : ALIGN(4)
  {
    _Level2InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level2InterruptVector.text))
    _Level2InterruptVector_text_end = ABSOLUTE(.);
  } >vector_int2_text :vector_int2_text_phdr

  .Level3InterruptVector.literal : ALIGN(4)
  {
    _Level3InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level3InterruptVector.literal)
    _Level3InterruptVector_literal_end = ABSOLUTE(.);
  } >vector_int3_lit :vector_int3_lit_phdr

  .Level3InterruptVector.text : ALIGN(4)
  {
    _Level3InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level3InterruptVector.text))
    _Level3InterruptVector_text_end = ABSOLUTE(.);
  } >vector_int3_text :vector_int3_text_phdr

  .Level4InterruptVector.literal : ALIGN(4)
  {
    _Level4InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level4InterruptVector.literal)
    _Level4InterruptVector_literal_end = ABSOLUTE(.);
  } >vector_int4_lit :vector_int4_lit_phdr

  .Level4InterruptVector.text : ALIGN(4)
  {
    _Level4InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level4InterruptVector.text))
    _Level4InterruptVector_text_end = ABSOLUTE(.);
  } >vector_int4_text :vector_int4_text_phdr

  .Level5InterruptVector.literal : ALIGN(4)
  {
    _Level5InterruptVector_literal_start = ABSOLUTE(.);
    *(.Level5InterruptVector.literal)
    _Level5InterruptVector_literal_end = ABSOLUTE(.);
  } >vector_int5_lit :vector_int5_lit_phdr

  .Level5InterruptVector.text : ALIGN(4)
  {
    _Level5InterruptVector_text_start = ABSOLUTE(.);
    KEEP (*(.Level5InterruptVector.text))
    _Level5InterruptVector_text_end = ABSOLUTE(.);
  } >vector_int5_text :vector_int5_text_phdr

  .DebugExceptionVector.literal : ALIGN(4)
  {
    _DebugExceptionVector_literal_start = ABSOLUTE(.);
    *(.DebugExceptionVector.literal)
    _DebugExceptionVector_literal_end = ABSOLUTE(.);
  } >vector_int6_lit :vector_int6_lit_phdr

  .DebugExceptionVector.text : ALIGN(4)
  {
    _DebugExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.DebugExceptionVector.text))
    _DebugExceptionVector_text_end = ABSOLUTE(.);
  } >vector_int6_text :vector_int6_text_phdr

  .NMIExceptionVector.literal : ALIGN(4)
  {
    _NMIExceptionVector_literal_start = ABSOLUTE(.);
    *(.NMIExceptionVector.literal)
    _NMIExceptionVector_literal_end = ABSOLUTE(.);
  } >vector_int7_lit :vector_int7_lit_phdr

  .NMIExceptionVector.text : ALIGN(4)
  {
    _NMIExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.NMIExceptionVector.text))
    _NMIExceptionVector_text_end = ABSOLUTE(.);
  } >vector_int7_text :vector_int7_text_phdr

  .KernelExceptionVector.literal : ALIGN(4)
  {
    _KernelExceptionVector_literal_start = ABSOLUTE(.);
    *(.KernelExceptionVector.literal)
    _KernelExceptionVector_literal_end = ABSOLUTE(.);
  } >vector_kernel_lit :vector_kernel_lit_phdr

  .KernelExceptionVector.text : ALIGN(4)
  {
    _KernelExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.KernelExceptionVector.text))
    _KernelExceptionVector_text_end = ABSOLUTE(.);
  } >vector_kernel_text :vector_kernel_text_phdr

  .UserExceptionVector.literal : ALIGN(4)
  {
    _UserExceptionVector_literal_start = ABSOLUTE(.);
    *(.UserExceptionVector.literal)
    _UserExceptionVector_literal_end = ABSOLUTE(.);
  } >vector_user_lit :vector_user_lit_phdr

  .UserExceptionVector.text : ALIGN(4)
  {
    _UserExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.UserExceptionVector.text))
    _UserExceptionVector_text_end = ABSOLUTE(.);
  } >vector_user_text :vector_user_text_phdr

  .DoubleExceptionVector.literal : ALIGN(4)
  {
    _DoubleExceptionVector_literal_start = ABSOLUTE(.);
    *(.DoubleExceptionVector.literal)
    _DoubleExceptionVector_literal_end = ABSOLUTE(.);
  } >vector_double_lit :vector_double_lit_phdr

  .DoubleExceptionVector.text : ALIGN(4)
  {
    _DoubleExceptionVector_text_start = ABSOLUTE(.);
    KEEP (*(.DoubleExceptionVector.text))
    _DoubleExceptionVector_text_end = ABSOLUTE(.);
  } >vector_double_text :vector_double_text_phdr

  .text : ALIGN(4)
  {
    _stext = .;
    _text_start = ABSOLUTE(.);
    KEEP (*(.MainEntry.text))
    *(.entry.text)
    *(.init.literal)
    KEEP(*(.init))
    *(.literal .text .literal.* .text.* .stub .gnu.warning .gnu.linkonce.literal.* .gnu.linkonce.t.*.literal .gnu.linkonce.t.*)
    *(.fini.literal)
    KEEP(*(.fini))
    *(.gnu.version)
    KEEP (*(.ResetHandler.text))
    _text_end = ABSOLUTE(.);
    _etext = .;
  } >sof_fw :sof_fw_phdr

  .rodata : ALIGN(4096)
  {
    _rodata_start = ABSOLUTE(.);
    *(.rodata)
    *(.rodata.*)
    *(.gnu.linkonce.r.*)
    *(.rodata1)
    __XT_EXCEPTION_TABLE__ = ABSOLUTE(.);
    KEEP (*(.xt_except_table))
    KEEP (*(.gcc_except_table))
    *(.gnu.linkonce.e.*)
    *(.gnu.version_r)
    KEEP (*(.eh_frame))
    /*  C++ constructor and destructor tables, properly ordered:  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    /*  C++ exception handlers table:  */
    __XT_EXCEPTION_DESCS__ = ABSOLUTE(.);
    *(.xt_except_desc)
    *(.gnu.linkonce.h.*)
    __XT_EXCEPTION_DESCS_END__ = ABSOLUTE(.);
    *(.xt_except_desc_end)
    *(.dynamic)
    *(.gnu.version_d)
    . = ALIGN(4);		/* this table MUST be 4-byte aligned */
    _bss_table_start = ABSOLUTE(.);
    LONG(_bss_start)
    LONG(_bss_end)
    _bss_table_end = ABSOLUTE(.);
    _rodata_end = ABSOLUTE(.);
  } >sof_fw :sof_fw_phdr

  .module_init : ALIGN(4)
  {
    _module_init_start = ABSOLUTE(.);
    *(*.module_init)
    _module_init_end = ABSOLUTE(.);
  } >sof_fw :sof_fw_phdr

  .shared_data : ALIGN(PLATFORM_DCACHE_ALIGN)
  {
    _shared_data_start = ABSOLUTE(.);
    *(*.shared_data)
    _shared_data_end = ABSOLUTE(.);
    . = ALIGN(PLATFORM_DCACHE_ALIGN);
  } >sof_fw :sof_fw_phdr

  .data : ALIGN(4)
  {
    _data_start = ABSOLUTE(.);
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d.*)
    KEEP(*(.gnu.linkonce.d.*personality*))
    *(.data1)
    *(.sdata)
    *(.sdata.*)
    *(.gnu.linkonce.s.*)
    *(.sdata2)
    *(.sdata2.*)
    *(.gnu.linkonce.s2.*)
    KEEP(*(.jcr))
    _data_end = ABSOLUTE(.);
  } >sof_fw :sof_fw_phdr

  .lit4 : ALIGN(4)
  {
    _lit4_start = ABSOLUTE(.);
    *(*.lit4)
    *(.lit4.*)
    *(.gnu.linkonce.lit4.*)
    _lit4_end = ABSOLUTE(.);
  } >sof_fw :sof_fw_phdr

  .fw_ready : ALIGN(4)
  {
    KEEP (*(.fw_ready))
    KEEP (*(.fw_ready_metadata))
  } >sof_fw :sof_fw_phdr

  .bss (NOLOAD) : ALIGN(4096)
  {
    . = ALIGN (8);
    _bss_start = ABSOLUTE(.);
    *(.dynsbss)
    *(.sbss)
    *(.sbss.*)
    *(.gnu.linkonce.sb.*)
    *(.scommon)
    *(.sbss2)
    *(.sbss2.*)
    *(.gnu.linkonce.sb2.*)
    *(.dynbss)
    *(.bss)
    *(.bss.*)
    *(.gnu.linkonce.b.*)
    *(COMMON)

    . = ALIGN (SRAM_BANK_SIZE);
    _runtime_heap_start = ABSOLUTE(.);
    . = . + HEAP_RUNTIME_SIZE;
    _runtime_heap_end = ABSOLUTE(.);

    . = ALIGN (HEAP_BUF_ALIGNMENT);
    _buffer_heap_start = ABSOLUTE(.);
    . = . + HEAP_BUFFER_SIZE;
    _buffer_heap_end = ABSOLUTE(.);

    . = ALIGN (SRAM_BANK_SIZE);
    _system_heap_start = ABSOLUTE(.);
    . = . + HEAP_SYSTEM_M_SIZE;
    _system_heap_end = ABSOLUTE(.);

    . = ALIGN (HEAP_BUF_ALIGNMENT);
    _system_runtime_heap_start = ABSOLUTE(.);
    . = . + HEAP_SYS_RUNTIME_M_SIZE;
    _system_runtime_heap_end = ABSOLUTE(.);

    . = ALIGN (4096);
    _sof_stack_start = ABSOLUTE(.);
    . = . + SOF_STACK_SIZE;
    _sof_stack_end = ABSOLUTE(.);

    . = ALIGN (SRAM_BANK_SIZE);
    _sof_core_s_start = ABSOLUTE(.);
    . = . + SOF_CORE_S_T_SIZE;
    _sof_core_s_end = ABSOLUTE(.);

    _bss_end = ABSOLUTE(.);
  } >sof_fw :sof_fw_phdr

  /* stack */
  _end = _sof_stack_start;
  PROVIDE(end = _sof_stack_start);
  _stack_sentry = _sof_stack_start;
  __stack = _sof_stack_end;

  /* Slave core size */
  _core_s_size = SOF_CORE_S_SIZE;

  /* System Heap */
  _system_heap = _system_heap_start;

  /* system runtime heap */
  _system_runtime_heap = _system_runtime_heap_start;

  /* module heap */
  _module_heap = _runtime_heap_start;

  /* buffer heap */
  _buffer_heap = _buffer_heap_start;
  _buffer_heap_end = _buffer_heap_end;

  .debug  0 :  { *(.debug) }
  .line  0 :  { *(.line) }
  .debug_srcinfo  0 :  { *(.debug_srcinfo) }
  .debug_sfnames  0 :  { *(.debug_sfnames) }
  .debug_aranges  0 :  { *(.debug_aranges) }
  .debug_pubnames  0 :  { *(.debug_pubnames) }
  .debug_info  0 :  { *(.debug_info) }
  .debug_abbrev  0 :  { *(.debug_abbrev) }
  .debug_line  0 :  { *(.debug_line) }
  .debug_frame  0 :  { *(.debug_frame) }
  .debug_str  0 :  { *(.debug_str) }
  .debug_loc  0 :  { *(.debug_loc) }
  .debug_macinfo  0 :  { *(.debug_macinfo) }
  .debug_weaknames  0 :  { *(.debug_weaknames) }
  .debug_funcnames  0 :  { *(.debug_funcnames) }
  .debug_typenames  0 :  { *(.debug_typenames) }
  .debug_varnames  0 :  { *(.debug_varnames) }

  .xt.insn 0 :
  {
    KEEP (*(.xt.insn))
    KEEP (*(.gnu.linkonce.x.*))
  }
  .xt.prop 0 :
  {
    KEEP (*(.xt.prop))
    KEEP (*(.xt.prop.*))
    KEEP (*(.gnu.linkonce.prop.*))
  }
  .xt.lit 0 :
  {
    KEEP (*(.xt.lit))
    KEEP (*(.xt.lit.*))
    KEEP (*(.gnu.linkonce.p.*))
  }
  .xt.profile_range 0 :
  {
    KEEP (*(.xt.profile_range))
    KEEP (*(.gnu.linkonce.profile_range.*))
  }
  .xt.profile_ranges 0 :
  {
    KEEP (*(.xt.profile_ranges))
    KEEP (*(.gnu.linkonce.xt.profile_ranges.*))
  }
  .xt.profile_files 0 :
  {
    KEEP (*(.xt.profile_files))
    KEEP (*(.gnu.linkonce.xt.profile_files.*))
  }

  .static_log_entries (COPY) : ALIGN(1024)
  {
    *(*.static_log*)
  } > static_log_entries_seg :static_log_entries_phdr

  .lpsram(NOLOAD) : ALIGN(8)
  {
    _lpsram_start = ABSOLUTE(.);
    KEEP (*(*.lpsram))
    _lpsram_end = ABSOLUTE(.);
  } >lpsram_mem :lpsram_mem_phdr

}
